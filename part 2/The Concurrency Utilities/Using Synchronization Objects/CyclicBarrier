CyclicBarrier
A situation not uncommon in concurrent programming occurs when a set of two or more
threads must wait at a predetermined execution point until all threads in the set have reached that point.
To handle such a situation, the concurrent API supplies the CyclicBarrier class.
It enables you to define a synchronization object that suspends until the specified number
of threads has reached the barrier point.
CyclicBarrier has the following two constructors:
CyclicBarrier(int numThreads)
CyclicBarrier(int numThreads, Runnable action)


Here is the general procedure that you will follow to use CyclicBarrier. First, create a
CyclicBarrier object, specifying the number of threads that you will be waiting for. Next,
when each thread reaches the barrier, have it call await( ) on that object. This will pause
execution of the thread until all of the other threads also call await( ). Once the specified
number of threads has reached the barrier, await( ) will return, and execution will resume.
Also, if you have specified an action, then that thread is executed.
The await( ) method has the following two forms:
int await( ) throws InterruptedException, BrokenBarrierException
int await(long wait, TimeUnit tu)
throws InterruptedException, BrokenBarrierException, TimeoutException
